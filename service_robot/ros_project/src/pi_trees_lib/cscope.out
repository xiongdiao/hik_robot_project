cscope 15 $HOME/project/xd_robot/xd_robot_test/src/pi_trees_lib -q 0000000552 0000048032
	@/home/xd/project/xd_robot/xd_robot_test/src/pi_trees_lib/examples/composite_tasks.py

1 #!/
u§
/
bö
/
ív
 
pyth⁄


3 
‰om
 
	gpi_åìs_lib
.
pi_åìs_lib
 
imp‹t
 *

4 
imp‹t
 
time


6 
˛ass
 
	$ComposôeTasks
():

7 
def
 
	$__öô__
(
£lf
):

8 #Thê
roŸ
 
node


9 
BEHAVE
 = 
	`Sequí˚
("behave")

11 #Cª©ê
a
 
Sñe˘‹
 
composôe
 
	`èsk
 (
ªtu∫s
 
SUCCESS
 
as
 
so⁄
á†
™y
 
subèsk
Ñeturns SUCCESS)

12 
SELECTOR_TASK
 = 
	`Sñe˘‹
("Selector Count")

14 #Cª©ê
a
 
Sequí˚
 
composôe
 
	`èsk
 (
ªtu∫s
 
FAULURE
 
as
 
so⁄
á†
™y
 
subèsk
Ñëu∫†
FAILURE
)

15 
SEQUENCE_TASK
 = 
	`Sequí˚
("Sequence Count")

17 
WAIT_TASK
 = 
	`WaôTask
("Wait Task", 5)

19 #Cª©ê
thªe
 
cou¡ög
 
èsks


20 
COUNT2
 = 
	`Cou¡
("Count+2", 1, 2, 1)

21 
COUNT5
 = 
	`Cou¡
("Count-5", 5, 1, -1)

22 
COUNT16
 = 
	`Cou¡
("Count+16", 1, 16, 1)

24 #Add 
the
 
èsks
 
to
Åhê
£quí˚
 
composôe
 
èsk


25 
SEQUENCE_TASK
.
	$add_chûd
(
COUNT2
)

26 
SEQUENCE_TASK
.
	$add_chûd
(
WAIT_TASK
)

27 
SEQUENCE_TASK
.
	$add_chûd
(
COUNT5
)

28 
SEQUENCE_TASK
.
	$add_chûd
(
COUNT16
)

30 #Add 
the
 
èsks
 
to
Åhê
£À˘‹
 
composôe
 
èsk


31 
SELECTOR_TASK
.
	$add_chûd
(
COUNT5
)

32 
SELECTOR_TASK
.
	$add_chûd
(
COUNT2
)

33 
SELECTOR_TASK
.
	$add_chûd
(
COUNT16
)

35 #Add 
the
 
composôe
 
èsk
 
to
Åhê
roŸ
Åask

36 
BEHAVE
.
	$add_chûd
(
SEQUENCE_TASK
)

37 
BEHAVE
.
	$add_chûd
(
SELECTOR_TASK
)

39 #Pröà
a
 
sim∂e
 
ª¥e£¡©i⁄
 
of
 
the
 
åì


40 
¥öt
 "Behavior Tree Structure"

41 
	$¥öt_åì
(
BEHAVE
, 
u£_symbﬁs
=
True
)

43 #Ru¿
the
 
åì


44 
True
:

45 
°©us
 = 
BEHAVE
.
	$run
()

46 
°©us
 =
TaskSètus
.
SUCCESS
:

47 
¥öt
 "FinishedÑunningÅree."

50 #A 
cou¡ög
 
èsk
 
th©
 
exãnds
 
the
 
ba£
 
Task
Åask

51 
˛ass
 
	$Cou¡
(
Task
):

52 
def
 
	$__öô__
(
£lf
, 
«me
, 
°¨t
, 
°›
, 
°ï
, *
¨gs
, **
kw¨gs
):

53 
	`su≥r
(
Cou¡
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

55 
£lf
.
«me
 =Çame

56 
£lf
.
°¨t
 = start

57 
£lf
.
°›
 = stop

58 
£lf
.
°ï
 = step

59 
£lf
.
cou¡
 = sñf.
°¨t


60 
¥öt
 "Cª©ögÅask Cou¡", 
£lf
.
°¨t
, sñf.
°›
, sñf.
°ï


62 
def
 
	$run
(
£lf
):

63 
	`abs
(
£lf
.
cou¡
 - sñf.
°›
 - sñf.
°ï
) <= 0:

64  
TaskSètus
.
SUCCESS


66 
¥öt
 
£lf
.
«me
, sñf.
cou¡


67 
time
.
	$¶ìp
(0.5)

68 
£lf
.
cou¡
 +£lf.
°ï


69 
	`abs
(
£lf
.
cou¡
 - sñf.
°›
 - sñf.
°ï
) <= 0:

70  
TaskSètus
.
SUCCESS


72  
TaskSètus
.
RUNNING


75 
def
 
	$ª£t
(
£lf
):

76 
£lf
.
cou¡
 = sñf.
°¨t


78 
__«me__
 == '__main__':

79 
åì
 = 
	`ComposôeTasks
()

	@/home/xd/project/xd_robot/xd_robot_test/src/pi_trees_lib/examples/parallel_example.py

1 #!/
u§
/
bö
/
ív
 
pyth⁄


3 
‰om
 
	gpi_åìs_lib
.
pi_åìs_lib
 
imp‹t
 *

4 
imp‹t
 
time


6 
˛ass
 
	$P¨ÆÀlExam∂e
():

7 
def
 
	$__öô__
(
£lf
):

8 #Thê
roŸ
 
node


9 
BEHAVE
 = 
	`Sequí˚
("behave")

11 #Cª©ê
a
 
P¨ÆÀlO√
 
composôe
 
	`èsk
 (
ªtu∫s
 
SUCCESS
 
as
 
so⁄
á†
™y
 
subèsk
Ñeturns SUCCESS)

12 
PARALLEL_TASKS
 = 
	`P¨ÆÀlO√
("Counting in Parallel")

14 #Cª©ê
thªe
 
cou¡ög
 
èsks


15 
COUNT2
 = 
	`Cou¡
("Count+2", 1, 2, 1)

16 
COUNT5
 = 
	`Cou¡
("Count-5", 5, 1, -1)

17 
COUNT16
 = 
	`Cou¡
("Count+16", 1, 16, 1)

19 #Add 
the
 
èsks
 
to
Åhê
∑øŒñ
 
composôe
 
èsk


20 
PARALLEL_TASKS
.
	$add_chûd
(
COUNT5
)

21 
PARALLEL_TASKS
.
	$add_chûd
(
COUNT2
)

22 
PARALLEL_TASKS
.
	$add_chûd
(
COUNT16
)

24 #Add 
the
 
composôe
 
èsk
 
to
Åhê
roŸ
Åask

25 
BEHAVE
.
	$add_chûd
(
PARALLEL_TASKS
)

27 #Pröà
a
 
sim∂e
 
ª¥e£¡©i⁄
 
of
 
the
 
åì


28 
¥öt
 "Behavior Tree Structure"

29 
	$¥öt_åì
(
BEHAVE
)

31 #Ru¿
the
 
åì


32 
True
:

33 
°©us
 = 
BEHAVE
.
	$run
()

34 
°©us
 =
TaskSètus
.
SUCCESS
:

35 
¥öt
 "FinishedÑunningÅree."

38 #A 
cou¡ög
 
èsk
 
th©
 
exãnds
 
the
 
ba£
 
Task
Åask

39 
˛ass
 
	$Cou¡
(
Task
):

40 
def
 
	$__öô__
(
£lf
, 
«me
, 
°¨t
, 
°›
, 
°ï
, *
¨gs
, **
kw¨gs
):

41 
	`su≥r
(
Cou¡
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

43 
£lf
.
«me
 =Çame

44 
£lf
.
°¨t
 = start

45 
£lf
.
°›
 = stop

46 
£lf
.
°ï
 = step

47 
£lf
.
cou¡
 = sñf.
°¨t


48 
¥öt
 "Cª©ögÅask Cou¡", 
£lf
.
°¨t
, sñf.
°›
, sñf.
°ï


50 
def
 
	$run
(
£lf
):

51 
	`abs
(
£lf
.
cou¡
 - sñf.
°›
 - sñf.
°ï
) <= 0:

52  
TaskSètus
.
SUCCESS


54 
¥öt
 
£lf
.
«me
, sñf.
cou¡


55 
time
.
	$¶ìp
(0.5)

56 
£lf
.
cou¡
 +£lf.
°ï


57 
	`abs
(
£lf
.
cou¡
 - sñf.
°›
 - sñf.
°ï
) <= 0:

58  
TaskSètus
.
SUCCESS


60  
TaskSètus
.
RUNNING


63 
def
 
	$ª£t
(
£lf
):

64 
£lf
.
cou¡
 = sñf.
°¨t


66 
__«me__
 == '__main__':

67 
åì
 = 
	`P¨ÆÀlExam∂e
()

	@/home/xd/project/xd_robot/xd_robot_test/src/pi_trees_lib/examples/patrol_tree.py

1 #!/
u§
/
bö
/
ív
 
pyth⁄


3 
imp‹t
 
ro•y


4 
‰om
 
	g°d_msgs
.
msg
 
imp‹t
 
Flﬂt32


5 
‰om
 
	ggeomëry_msgs
.
msg
 
imp‹t
 
	gTwi°


6 #‰om 
rbx2_msgs
.
§v
 
imp‹t
 *

7 
‰om
 
	gpi_åìs_ros
.
pi_åìs_ros
 
imp‹t
 *

8 
‰om
 
	gpi_åìs_lib
.
èsk_£tup
 
imp‹t
 *

10 
˛ass
 
	$BœckBﬂrd
():

11 
def
 
	$__öô__
(
£lf
):

12 
£lf
.
b©ãry_Àvñ
 = 
N⁄e


13 
£lf
.
ch¨gög
 = 
N⁄e


15 
˛ass
 
	$P©rﬁ
():

16 
def
 
	$__öô__
(
£lf
):

17 
ro•y
.
	`öô_node
("patrol_tree")

19 #Së 
the
 
shutdown
 
	`fun˘i⁄
 (
°›
Åhê
robŸ
)

20 
ro•y
.
	$⁄_shutdown
(
£lf
.
shutdown
)

22 #Inôülizê
a
 
numbî
 
of
 
∑ømëîs
 
™d
 
v¨übÀs


23 
	$£tup_èsk_ívú⁄mít
(
£lf
)

25 #Inôülizê
the
 
bœck
 
bﬂrd


26 
£lf
.
bœckbﬂrd
 = 
	$BœckBﬂrd
()

28 #How 
‰equíéy
 dÿ
we
 "tic" 
the
 
åì
?

29 
øã
 = 
ro•y
.
	`gë_∑øm
('~rate', 10)

31 #C⁄vîà
tic
 
øã
 
to
 
a
 
ROS
Ñate

32 
tic
 = 
ro•y
.
	$R©e
(
øã
)

34 #Whîê
should
 
the
 
DOT
 
fûe
 
be
 
°‹ed
. 
DeÁu…
 
loˇti⁄
 
is
 
$HOME
/.
ros
/
åì
.
dŸ


35 
dŸfûï©h
 = 
ro•y
.
	`gë_∑øm
('~dŸfûï©h', 
N⁄e
)

37 #Cª©ê
a
 
li°
 
to
 
hﬁd
 
the
 
move_ba£
 
èsks


38 
MOVE_BASE_TASKS
 = 
	$li°
()

40 
n_waypoöts
 = 
	$Àn
(
£lf
.
waypoöts
)

42 #Cª©ê
sim∂e
 
a˘i⁄
 
«vig©i⁄
 
èsk
 
óch
 
waypoöt


43 
i
 
ö
 
	$ønge
(
n_waypoöts
):

44 
gﬂl
 = 
	$MoveBa£Gﬂl
()

45 
gﬂl
.
èrgë_po£
.
hódî
.
‰ame_id
 = 'map'

46 
gﬂl
.
èrgë_po£
.
hódî
.
°amp
 = 
ro•y
.
Time
.
	$now
()

47 
gﬂl
.
èrgë_po£
.
po£
 = 
£lf
.
waypoöts
[
i
 % 
n_waypoöts
]

49 
move_ba£_èsk
 = 
	`Sim∂eA˘i⁄Task
("MOVE_BASE_TASK_" + 
	`°r
(
i
), "move_ba£", 
MoveBa£A˘i⁄
, 
gﬂl
, 
ª£t_a·î
=
FÆ£
)

51 
MOVE_BASE_TASKS
.
	$≠≥nd
(
move_ba£_èsk
)

53 #Së 
the
 
dockög
 
°©i⁄
 
po£


54 
gﬂl
 = 
	$MoveBa£Gﬂl
()

55 
gﬂl
.
èrgë_po£
.
hódî
.
‰ame_id
 = 'map'

56 
gﬂl
.
èrgë_po£
.
hódî
.
°amp
 = 
ro•y
.
Time
.
	$now
()

57 
gﬂl
.
èrgë_po£
.
po£
 = 
£lf
.
dockög_°©i⁄_po£


59 #Assig¿
the
 
dockög
 
°©i⁄
 
po£
 
to
 
a
 
move_ba£
 
a˘i⁄
 
èsk


60 
NAV_DOCK_TASK
 = 
	`Sim∂eA˘i⁄Task
("NAV_DOC_TASK", "move_ba£", 
MoveBa£A˘i⁄
, 
gﬂl
, 
ª£t_a·î
=
FÆ£
)

62 #Cª©ê
the
 
roŸ
 
node


63 
BEHAVE
 = 
	`Sequí˚
("BEHAVE")

65 #Cª©ê
the
 "°ay hó…hy" 
£À˘‹


66 
STAY_HEALTHY
 = 
	`Sñe˘‹
("STAY_HEALTHY")

68 #Cª©ê
the
 
∑åﬁ
 
lo›
 
dec‹©‹


69 
LOOP_PATROL
 = 
	`Lo›
("LOOP_PATROL", 
ôî©i⁄s
=
£lf
.
n_∑åﬁs
)

71 #Add 
the
 
two
 
subåìs
 
to
Åhê
roŸ
 
node
 
ö
 
‹dî
 
of
 
¥i‹ôy


72 
BEHAVE
.
	$add_chûd
(
STAY_HEALTHY
)

73 
BEHAVE
.
	$add_chûd
(
LOOP_PATROL
)

75 #Cª©ê
the
 
∑åﬁ
 
ôî©‹


76 
PATROL
 = 
	`Iãøt‹
("PATROL")

78 #Add 
the
 
move_ba£
 
èsks
 
to
Åhê
∑åﬁ
 
èsk


79 
èsk
 
ö
 
MOVE_BASE_TASKS
:

80 
PATROL
.
	$add_chûd
(
èsk
)

82 #Add 
the
 
∑åﬁ
 
to
Åhê
lo›
 
dec‹©‹


83 
LOOP_PATROL
.
	$add_chûd
(
PATROL
)

85 #Add 
the
 
b©ãry
 
check
 
™d
 
ªch¨ge
 
èsks
 
to
Åhê"°ay hó…hy" 
èsk


86 
wôh
 
STAY_HEALTHY
:

87 #M⁄ô‹ 
the
 
Áke
 
b©ãry
 
Àvñ
 
by
 
subs¸ibög
 
to
Åhê/
b©ãry_Àvñ
 
t›ic


88 
MONITOR_BATTERY
 = 
	`M⁄ô‹Task
("MONITOR_BATTERY", "b©ãry_Àvñ", 
Flﬂt32
, 
£lf
.
m⁄ô‹_b©ãry
)

90 #I†
the
 
Áke
 
b©ãry
 
Àvñ
 
bñow
 
thªshﬁd
?

91 
CHECK_BATTERY
 = 
	`CÆlbackTask
("BATTERY_OK?", 
£lf
.
check_b©ãry
)

93 #Së 
the
 
Áke
 
b©ãry
 
Àvñ
 
back
 
to
 100 
usög
 
a
 
Sîvi˚Task


94 
CHARGE_COMPLETE
 = 
	`Sîvi˚Task
("CHARGE_COMPLETE", "/b©ãry_simuœt‹/£t_b©ãry_Àvñ", 
SëB©ãryLevñ
, 100, 
ªsu…_cb
=
£lf
.
ªch¨ge_cb
)

96 #SÀï 
the
 
giví
 
öãrvÆ
 
to
 
simuœã
 
ch¨gög


97 
CHARGING
 = 
	`Rech¨geRobŸ
("CHARGING", 
öãrvÆ
=3, 
bœckbﬂrd
=
£lf
.blackboard)

99 #Buûd 
the
 
ªch¨ge
 
£quí˚
 
usög
 
ölöe
 
c⁄°ru˘i⁄


100 
RECHARGE
 = 
	`Sequí˚
("RECHARGE", [
NAV_DOCK_TASK
, 
CHARGING
, 
CHARGE_COMPLETE
], 
ª£t_a·î
=
True
)

102 #Add 
the
 
check
 
b©ãry
 
™d
 
ªch¨ge
 
èsks
 
to
Åhê
°ay
 
hó…hy
 
£À˘‹


103 
STAY_HEALTHY
.
	$add_chûd
(
CHECK_BATTERY
)

104 
STAY_HEALTHY
.
	$add_chûd
(
RECHARGE
)

106 #Di•œy 
the
 
åì
 
bef‹e
 
begönög
 
executi⁄


107 
¥öt
 "Patrol Behavior Tree"

108 
	$¥öt_åì
(
BEHAVE
)

110 #Ru¿
the
 
åì


111 
nŸ
 
ro•y
.
	$is_shutdown
():

112 
BEHAVE
.
°©us
 = BEHAVE.
	$run
()

113 
tic
.
	$¶ìp
()

114 
	$¥öt_dŸ_åì
(
BEHAVE
, 
dŸfûï©h
)

116 
def
 
	$m⁄ô‹_b©ãry
(
£lf
, 
msg
):

117 #St‹ê
the
 
b©ãry
 
Àvñ
 
as
 
published
 
⁄
Åhê
Áke
 b©ãryÜevñ 
t›ic


118 
£lf
.
bœckbﬂrd
.
b©ãry_Àvñ
 = 
msg
.
d©a


119  
True


121 
def
 
	$check_b©ãry
(
£lf
):

123 
£lf
.
bœckbﬂrd
.
ch¨gög
:

124  
FÆ£


126 
£lf
.
bœckbﬂrd
.
b©ãry_Àvñ
 
is
 
N⁄e
:

127  
N⁄e


128 
ñif
 
£lf
.
bœckbﬂrd
.
b©ãry_Àvñ
 < sñf.
low_b©ãry_thªshﬁd
:

129 
ro•y
.
	`logöfo
("LOW BATTERY -Üevñ: " + 
	`°r
((
£lf
.
bœckbﬂrd
.
b©ãry_Àvñ
)))

130  
FÆ£


132  
True


134 
def
 
	$ªch¨ge_cb
(
£lf
, 
ªsu…
):

135 
ro•y
.
	`logöfo
("BATTERY CHARGED!")

136 
£lf
.
bœckbﬂrd
.
b©ãry_Àvñ
 = 100

137 
£lf
.
bœckbﬂrd
.
ch¨gög
 = 
FÆ£


138 
ro•y
.
	$¶ìp
(2)

139  
True


141 
def
 
	$shutdown
(
£lf
):

142 
ro•y
.
	`logöfo
("StoppingÅheÑobot...")

143 
£lf
.
move_ba£
.
	$ˇn˚l_Æl_gﬂls
()

144 
£lf
.
cmd_vñ_pub
.
	`publish
(
	$Twi°
())

145 
ro•y
.
	$¶ìp
(1)

147 
˛ass
 
	$Rech¨geRobŸ
(
Task
):

148 
def
 
	$__öô__
(
£lf
, 
«me
, 
öãrvÆ
=3, 
bœckbﬂrd
=
N⁄e
):

149 
	`su≥r
(
Rech¨geRobŸ
, 
£lf
).
	$__öô__
(
«me
)

151 
£lf
.
«me
 =Çame

152 
£lf
.
öãrvÆ
 = interval

153 
£lf
.
bœckbﬂrd
 = blackboard

155 
£lf
.
timî
 = 0

157 
def
 
	$run
(
£lf
):

158 
£lf
.
timî
 == 0:

159 
ro•y
.
	`logöfo
("CHARGING THE ROBOT!")

161 
£lf
.
timî
 < sñf.
öãrvÆ
:

162 
£lf
.
timî
 += 0.1

163 
ro•y
.
	$¶ìp
(0.1)

164 
£lf
.
bœckbﬂrd
.
ch¨gög
 = 
True


165  
TaskSètus
.
RUNNING


167  
TaskSètus
.
SUCCESS


169 
def
 
	$ª£t
(
£lf
):

170 
£lf
.
°©us
 = 
N⁄e


171 
£lf
.
timî
 = 0

173 
__«me__
 == '__main__':

174 
åì
 = 
	`P©rﬁ
()

	@/home/xd/project/xd_robot/xd_robot_test/src/pi_trees_lib/examples/weighted_random_example.py

1 #!/
u§
/
bö
/
ív
 
pyth⁄


3 
‰om
 
	gpi_åìs_lib
.
pi_åìs_lib
 
imp‹t
 *

4 
imp‹t
 
time


6 
˛ass
 
	$WeighãdR™domExam∂e
():

7 
def
 
	$__öô__
(
£lf
):

8 #Thê
roŸ
 
node


9 
BEHAVE
 = 
	`Sequí˚
("behave")

11 #Cª©ê
a
 
P¨ÆÀlO√
 
composôe
 
	`èsk
 (
ªtu∫s
 
SUCCESS
 
as
 
so⁄
á†
™y
 
subèsk
Ñeturns SUCCESS)

12 
WEIGHTED_RANDOM_TASKS
 = 
	`WeighãdR™domSñe˘‹
("Weighãd R™dom Sñe˘‹", 
weights
=[3, 2, 1], 
ª£t_a·î
=
True
)

14 #Cª©ê
thªe
 
cou¡ög
 
èsks


15 
TASK1
 = 
	`Mesßge
("High_Probability", "Highest Probability Task")

16 
TASK2
 = 
	`Mesßge
("Medium_Probability", "Medium Probability Task")

17 
TASK3
 = 
	`Mesßge
("Low_Probability", "Lowest Probability Task")

19 #Add 
the
 
èsks
 
to
Åhê
∑øŒñ
 
composôe
 
èsk


20 
WEIGHTED_RANDOM_TASKS
.
	$add_chûd
(
TASK1
)

21 
WEIGHTED_RANDOM_TASKS
.
	$add_chûd
(
TASK2
)

22 
WEIGHTED_RANDOM_TASKS
.
	$add_chûd
(
TASK3
)

24 
LOOP
 = 
	`Lo›
("Lo›_F‹evî", 
ôî©i⁄s
=-1)

26 
LOOP
.
	$add_chûd
(
WEIGHTED_RANDOM_TASKS
)

28 #Add 
the
 
composôe
 
èsk
 
to
Åhê
roŸ
Åask

29 
BEHAVE
.
	$add_chûd
(
LOOP
)

31 #Pröà
a
 
sim∂e
 
ª¥e£¡©i⁄
 
of
 
the
 
åì


32 
¥öt
 "Behavior Tree Structure"

33 
	$¥öt_åì
(
BEHAVE
)

35 #Ru¿
the
 
åì


36 
True
:

37 
°©us
 = 
BEHAVE
.
	$run
()

38 
°©us
 =
TaskSètus
.
SUCCESS
:

39 
¥öt
 "FinishedÑunningÅree."

42 #A 
èsk
 
to
 
¥öt
 
a
 
mesßge


43 
˛ass
 
	$Mesßge
(
Task
):

44 
def
 
	$__öô__
(
£lf
, 
«me
, 
mesßge
, *
¨gs
, **
kw¨gs
):

45 
	`su≥r
(
Mesßge
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

47 
£lf
.
«me
 =Çame

48 
£lf
.
mesßge
 = message

49 
¥öt
 "Cª©ög mesßgêèsk: ", 
£lf
.
mesßge


51 
def
 
	$run
(
£lf
):

52 
¥öt
 
£lf
.
mesßge


53 
time
.
	$¶ìp
(1)

55  
TaskSètus
.
SUCCESS


58 
__«me__
 == '__main__':

59 
åì
 = 
	`WeighãdR™domExam∂e
()

	@/home/xd/project/xd_robot/xd_robot_test/src/pi_trees_lib/examples/xd_btree_example.py

1 #!/
u§
/
bö
/
ív
 
pyth⁄


3 
‰om
 
	gpi_åìs_lib
.
pi_åìs_lib
 
imp‹t
 *

4 
imp‹t
 
time


6 
˛ass
 
	$RobŸFuncTask
():

7 
def
 
	$__öô__
(
£lf
):

8 #Thê
roŸ
 
node


9 
XdBåì
 = 
	`Sequí˚
("xd_btree")

11 #Cª©ê
a
 
Sñe˘‹
 
composôe
 
	`èsk
 (
ªtu∫s
 
SUCCESS
 
as
 
so⁄
á†
™y
 
subèsk
Ñeturns SUCCESS)

12 
Sñe˘‹Node
 = 
	`Sñe˘‹
("SelectorNode")

14 #Cª©ê
a
 
Sequí˚
 
composôe
 
	`èsk
 (
ªtu∫s
 
FAULURE
 
as
 
so⁄
á†
™y
 
subèsk
Ñëu∫†
FAILURE
)

15 
Sequí˚Node
 = 
	`Sequí˚
("SequenceNode")

17 #Cª©ê
thªe
 
cou¡ög
 
èsks


18 
Cou¡2
 = 
	`Cou¡
("Count+2", 1, 2, 1)

19 
Cou¡5
 = 
	`Cou¡
("Count-5", 5, 1, -1)

20 
Cou¡6
 = 
	`Cou¡
("Count-6", 6, 1, -1)

21 
Cou¡16
 = 
	`Cou¡
("Count+16", 1, 16, 1)

23 #Add 
the
 
èsks
 
to
Åhê
£quí˚
 
composôe
 
èsk


24 
Sequí˚Node
.
	$add_chûd
(
Cou¡5
)

25 
Sequí˚Node
.
	$add_chûd
(
Cou¡16
)

27 #Add 
the
 
èsks
 
to
Åhê
£À˘‹
 
composôe
 
èsk


28 
Sñe˘‹Node
.
	$add_chûd
(
Cou¡6
)

29 
Sñe˘‹Node
.
	$add_chûd
(
Cou¡16
)

31 #Add 
the
 
composôe
 
èsk
 
to
Åhê
roŸ
Åask

32 
XdBåì
.
	$add_chûd
(
Sequí˚Node
)

33 
XdBåì
.
	$add_chûd
(
Sñe˘‹Node
)

35 #Pröà
a
 
sim∂e
 
ª¥e£¡©i⁄
 
of
 
the
 
åì


36 
¥öt
 "Behavior Tree Structure"

37 
	$¥öt_åì
(
XdBåì
, 
u£_symbﬁs
=
True
)

39 #Ru¿
the
 
åì


40 
True
:

41 
°©us
 = 
XdBåì
.
	$run
()

42 
¥öt
 "XdBtreeÑun"

43 
°©us
 =
TaskSètus
.
SUCCESS
:

44 
¥öt
 "FinishedÑunningÅree."

46 
time
.
	$¶ìp
(0.02)

48 #A 
cou¡ög
 
èsk
 
th©
 
exãnds
 
the
 
ba£
 
Task
Åask

49 
˛ass
 
	$Cou¡
(
Task
):

50 
def
 
	$__öô__
(
£lf
, 
«me
, 
°¨t
, 
°›
, 
°ï
, *
¨gs
, **
kw¨gs
):

51 
	`su≥r
(
Cou¡
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

53 
£lf
.
«me
 =Çame

54 
£lf
.
°¨t
 = start

55 
£lf
.
°›
 = stop

56 
£lf
.
°ï
 = step

57 
£lf
.
cou¡
 = sñf.
°¨t


58 
¥öt
 "Cª©ögÅask Cou¡", 
£lf
.
°¨t
, sñf.
°›
, sñf.
°ï


60 
def
 
	$run
(
£lf
):

61 
	`abs
(
£lf
.
cou¡
 - sñf.
°›
 - sñf.
°ï
) <= 0:

62 
¥öt
 
£lf
.
«me
, "returen sucess"

63  
TaskSètus
.
SUCCESS


65 
¥öt
 
£lf
.
«me
, sñf.
cou¡


66 #time.
	`¶ìp
(0.1)

67 
£lf
.
cou¡
 +£lf.
°ï


68 
	`abs
(
£lf
.
cou¡
 - sñf.
°›
 - sñf.
°ï
) <= 0:

69 
¥öt
 
£lf
.
«me
, "returen sucess"

70  
TaskSètus
.
SUCCESS


72  
TaskSètus
.
RUNNING


75 
def
 
	$ª£t
(
£lf
):

76 
£lf
.
cou¡
 = sñf.
°¨t


78 
__«me__
 == '__main__':

79 
åì
 = 
	`RobŸFuncTask
()

	@/home/xd/project/xd_robot/xd_robot_test/src/pi_trees_lib/setup.py

1 #!/
u§
/
bö
/
ív
 
pyth⁄


3 
‰om
 
	gdi°utûs
.
c‹e
 
imp‹t
 
£tup


4 
‰om
 
	gˇtkö_pkg
.
pyth⁄_£tup
 
imp‹t
 
gíî©e_di°utûs_£tup


6 
	gd
 = 
gíî©e_di°utûs_£tup
(

7 
∑ckages
=['pi_trees_lib'],

8 
∑ckage_dú
={'': 'src'},

11 
£tup
(**
d
)

	@/home/xd/project/xd_robot/xd_robot_test/src/pi_trees_lib/src/pi_trees_lib/__init__.py

	@/home/xd/project/xd_robot/xd_robot_test/src/pi_trees_lib/src/pi_trees_lib/pi_trees_lib.py

1 #!/
u§
/
bö
/
ív
 
pyth⁄


3 
imp‹t
 
°rög


4 
‰om
 
øndom
 
imp‹t
 
	gøndom
, 
shufÊe


6 
imp‹t
 
	gos


8 #imp‹à
pygøphviz
 
as
 
pgv


10 
‰om
 
time
 
imp‹t
 
¶ìp


12 
˛ass
 
	$TaskSètus
(
obje˘
):

14 
FAILURE
 = 0

15 
SUCCESS
 = 1

16 
RUNNING
 = 2

18 #A 
globÆ
 
vÆue
 
to
 
åack
 
whí
 
the
 
åì
's status has changed. Used inÅheÖrint_dot_tree() function.

19 
œ°_dŸ_åì
 = ''

21 
def
 
	$weighãd_choi˚
(
weights
):

22 
∫d
 = 
	`øndom
(Ë* 
	$sum
(
weights
)

23 
i
, 
w
 
ö
 
	$íumî©e
(
weights
):

24 
∫d
 -
w


25 
∫d
 < 0:

26  
i


28 
def
 
	$weighãd_shufÊe
(
a
,
w
):

29 
w
 = 
	$li°
(
w
Ë#makê
a
 
c›y
 
of
 w

30 
	`Àn
(
a
Ë!
	$Àn
(
w
):

31 
	`¥öt
("ERROR: Weighted_shuffle: Number of weights doesÇot matchÇumber of children.")

32 
os
.
	$_exô
(0)

35 
r
 = [0]*
	$Àn
(
a
Ë#c⁄èö†
the
 
øndom
 
shufÊe


36 
i
 
ö
 
	`ønge
(
	$Àn
(
a
)):

37 
j
 = 
	$weighãd_choi˚
(
w
)

38 
r
[
i
]=
a
[
j
]

39 
w
[
j
] = 0

40  
r


42 
˛ass
 
	$Task
(
obje˘
):

43 """ "
The
 
ba£
 
Task
 
˛ass
 """

44 
def
 
	$__öô__
(
£lf
, 
«me
, 
chûdªn
=
N⁄e
, 
ª£t_a·î
=
FÆ£
, 
™noun˚
=FÆ£, *
¨gs
, **
kw¨gs
):

45 
£lf
.
«me
 =Çame

46 
£lf
.
°©us
 = 
N⁄e


47 
£lf
.
ª£t_a·î
 =Ñeset_after

48 
£lf
.
_™noun˚
 = 
™noun˚


50 
chûdªn
 
is
 
N⁄e
:

51 
chûdªn
 = []

53 
£lf
.
chûdªn
 = children

55 
def
 
	$run
(
£lf
):

56 
∑ss


58 
def
 
	$ª£t
(
£lf
):

59 
c
 
ö
 
£lf
.
chûdªn
:

60 
c
.
	$ª£t
()

62 
£lf
.
°©us
 = 
N⁄e


64 
def
 
	$add_chûd
(
£lf
, 
c
):

65 
£lf
.
chûdªn
.
	$≠≥nd
(
c
)

67 
def
 
	$ªmove_chûd
(
£lf
, 
c
):

68 
£lf
.
chûdªn
.
	$ªmove
(
c
)

70 
def
 
	$¥ïíd_chûd
(
£lf
, 
c
):

71 
£lf
.
chûdªn
.
	$ö£π
(0, 
c
)

73 
def
 
	$ö£π_chûd
(
£lf
, 
c
, 
i
):

74 
£lf
.
chûdªn
.
	$ö£π
(
i
, 
c
)

76 
def
 
	$gë_°©us
(
£lf
):

77  
£lf
.
°©us


79 
def
 
	$£t_°©us
(
£lf
, 
s
):

80 
£lf
.
°©us
 = 
s


82 
def
 
	$™noun˚
(
£lf
):

83 
	`¥öt
("ExecutögÅask " + 
	$°r
(
£lf
.
«me
))

85 
def
 
	$gë_ty≥
(
£lf
):

86  
	$ty≥
(
£lf
)

88 #The£ 
√xt
 
two
 
fun˘i⁄s
 
Ælow
 
us
 
to
 
u£
 
the
 'wôh' 
sy¡ax


89 
def
 
	$__íãr__
(
£lf
):

90  
£lf
.
«me


92 
def
 
	$__exô__
(
£lf
, 
exc_ty≥
, 
exc_vÆ
, 
exc_tb
):

93 
exc_ty≥
 
is
 
nŸ
 
N⁄e
:

94  
FÆ£


95  
True


97 
˛ass
 
	$Sñe˘‹
(
Task
):

99 
©
 
which
 
poöt
 
ô
 
ªtu∫s
 
SUCCESS
. 
If
 
Æl
 
èsks
 
Áû
, 
a
 
FAILURE


100 
°©us
 
is
 
ªtu∫ed
. 
If
 
a
 
subèsk
 i†
°ûl
 
RUNNING
, 
thí
á RUNNING

101 
°©us
 
is
 
ªtu∫ed
 
™d
 
¥o˚ssög
 
c⁄töues
 
u¡û
 
eôhî
 
SUCCESS


102 
‹
 
FAILURE
 
is
 
ªtu∫ed
 
‰om
 
the
 
subèsk
.

104 
def
 
	$__öô__
(
£lf
, 
«me
, *
¨gs
, **
kw¨gs
):

105 
	`su≥r
(
Sñe˘‹
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

107 
def
 
	$run
(
£lf
):

108 
c
 
ö
 
£lf
.
chûdªn
:

110 
c
.
°©us
 = c.
	$run
()

112 
c
.
°©us
 !
TaskSètus
.
FAILURE
:

113 
c
.
°©us
 =
TaskSètus
.
SUCCESS
:

114 
£lf
.
ª£t_a·î
:

115 
£lf
.
	$ª£t
()

116  
TaskSètus
.
SUCCESS


118  
c
.
°©us


119  
c
.
°©us


121 
£lf
.
ª£t_a·î
:

122 
£lf
.
	$ª£t
()

124  
TaskSètus
.
FAILURE


126 
˛ass
 
	$Sequí˚
(
Task
):

128 
A
 
£quí˚
 
runs
 
óch
 
èsk
 
ö
 
‹dî
 
u¡û
 
⁄e
 
Áûs
,

129 
©
 
which
 
poöt
 
ô
 
ªtu∫s
 
FAILURE
. 
If
 
Æl
 
èsks
 
suc˚ed
, 
a
 
SUCCESS


130 
°©us
 
is
 
ªtu∫ed
. 
If
 
a
 
subèsk
 i†
°ûl
 
RUNNING
, 
thí
á RUNNING

131 
°©us
 
is
 
ªtu∫ed
 
™d
 
¥o˚ssög
 
c⁄töues
 
u¡û
 
eôhî
 
SUCCESS


132 
‹
 
FAILURE
 
is
 
ªtu∫ed
 
‰om
 
the
 
subèsk
.

134 
def
 
	$__öô__
(
£lf
, 
«me
, *
¨gs
, **
kw¨gs
):

135 
	`su≥r
(
Sequí˚
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

137 
def
 
	$run
(
£lf
):

138 
£lf
.
_™noun˚
:

139 
£lf
.
	$™noun˚
()

141 
c
 
ö
 
£lf
.
chûdªn
:

143 
c
.
°©us
 = c.
	$run
()

145 
c
.
°©us
 !
TaskSètus
.
SUCCESS
:

146 
c
.
°©us
 =
TaskSètus
.
FAILURE
:

147 
£lf
.
ª£t_a·î
:

148 
£lf
.
	$ª£t
()

149  
TaskSètus
.
FAILURE


150  
c
.
°©us


152 
£lf
.
ª£t_a·î
:

153 
£lf
.
	$ª£t
()

155  
TaskSètus
.
SUCCESS


157 
˛ass
 
	$R™domSñe˘‹
(
Task
):

159 
©
 
which
 
poöt
 
ô
 
ªtu∫s
 
SUCCESS
. 
If
 
Æl
 
èsks
 
Áû
, 
a
 
FAILURE


160 
°©us
 
is
 
ªtu∫ed
. 
If
 
a
 
subèsk
 i†
°ûl
 
RUNNING
, 
thí
á RUNNING

161 
°©us
 
is
 
ªtu∫ed
 
™d
 
¥o˚ssög
 
c⁄töues
 
u¡û
 
eôhî
 
SUCCESS


162 
‹
 
FAILURE
 
is
 
ªtu∫ed
 
‰om
 
the
 
subèsk
.

164 
def
 
	$__öô__
(
£lf
, 
«me
, *
¨gs
, **
kw¨gs
):

165 
	`su≥r
(
R™domSñe˘‹
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

167 
£lf
.
shufÊed
 = 
FÆ£


169 
def
 
	$run
(
£lf
):

170 
nŸ
 
£lf
.
shufÊed
:

171 
	$shufÊe
(
£lf
.
chûdªn
)

172 
£lf
.
shufÊed
 = 
True


174 
c
 
ö
 
£lf
.
chûdªn
:

176 
c
.
°©us
 = c.
	$run
()

178 
c
.
°©us
 !
TaskSètus
.
FAILURE
:

179 
c
.
°©us
 =
TaskSètus
.
SUCCESS
:

180 
£lf
.
shufÊed
 = 
FÆ£


182  
c
.
°©us


184 
£lf
.
shufÊed
 = 
FÆ£


186 
£lf
.
ª£t_a·î
:

187 
£lf
.
	$ª£t
()

189  
TaskSètus
.
FAILURE


191 
˛ass
 
	$R™domSequí˚
(
Task
):

193 
A
 
£quí˚
 
runs
 
óch
 
èsk
 
ö
 
øndom
 
‹dî
 
u¡û
 
⁄e
 
Áûs
,

194 
©
 
which
 
poöt
 
ô
 
ªtu∫s
 
FAILURE
. 
If
 
Æl
 
èsks
 
suc˚ed
, 
a
 
SUCCESS


195 
°©us
 
is
 
ªtu∫ed
. 
If
 
a
 
subèsk
 i†
°ûl
 
RUNNING
, 
thí
á RUNNING

196 
°©us
 
is
 
ªtu∫ed
 
™d
 
¥o˚ssög
 
c⁄töues
 
u¡û
 
eôhî
 
SUCCESS


197 
‹
 
FAILURE
 
is
 
ªtu∫ed
 
‰om
 
the
 
subèsk
.

199 
def
 
	$__öô__
(
£lf
, 
«me
, *
¨gs
, **
kw¨gs
):

200 
	`su≥r
(
R™domSequí˚
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

202 
£lf
.
shufÊed
 = 
FÆ£


204 
def
 
	$run
(
£lf
):

205 
nŸ
 
£lf
.
shufÊed
:

206 
	$shufÊe
(
£lf
.
chûdªn
)

207 
£lf
.
shufÊed
 = 
True


209 
c
 
ö
 
£lf
.
chûdªn
:

211 
c
.
°©us
 = c.
	$run
()

213 
c
.
°©us
 !
TaskSètus
.
SUCCESS
:

214 
c
.
°©us
 =
TaskSètus
.
FAILURE
:

215 
£lf
.
shufÊed
 = 
FÆ£


217  
c
.
°©us


219 
£lf
.
shufÊed
 = 
FÆ£


221 
£lf
.
ª£t_a·î
:

222 
£lf
.
	$ª£t
()

224  
TaskSètus
.
SUCCESS


226 
˛ass
 
	$WeighãdR™domSequí˚
(
Task
):

228 
A
 
£quí˚
 
runs
 
óch
 
èsk
 
ö
 
øndom
 
‹dî
 
u¡û
 
⁄e
 
Áûs
,

229 
©
 
which
 
poöt
 
ô
 
ªtu∫s
 
FAILURE
. 
If
 
Æl
 
èsks
 
suc˚ed
, 
a
 
SUCCESS


230 
°©us
 
is
 
ªtu∫ed
. 
If
 
a
 
subèsk
 i†
°ûl
 
RUNNING
, 
thí
á RUNNING

231 
°©us
 
is
 
ªtu∫ed
 
™d
 
¥o˚ssög
 
c⁄töues
 
u¡û
 
eôhî
 
SUCCESS


232 
‹
 
FAILURE
 
is
 
ªtu∫ed
 
‰om
 
the
 
subèsk
.

234 
def
 
	$__öô__
(
£lf
, 
«me
, 
weights
, *
¨gs
, **
kw¨gs
):

235 
	`su≥r
(
WeighãdR™domSequí˚
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

237 
£lf
.
shufÊed
 = 
FÆ£


238 
£lf
.
weights
 = weights

240 
def
 
	$run
(
£lf
):

241 
nŸ
 
£lf
.
shufÊed
:

242 
shufÊed_chûdªn
 = 
	$weighãd_shufÊe
(
£lf
.
chûdªn
, sñf.
weights
)

243 
£lf
.
shufÊed
 = 
True


245 
c
 
ö
 
shufÊed_chûdªn
:

247 
c
.
°©us
 = c.
	$run
()

249 
c
.
°©us
 !
TaskSètus
.
SUCCESS
:

250 
c
.
°©us
 =
TaskSètus
.
FAILURE
:

251 
£lf
.
shufÊed
 = 
FÆ£


253  
c
.
°©us


255 
£lf
.
shufÊed
 = 
FÆ£


257 
£lf
.
ª£t_a·î
:

258 
£lf
.
	$ª£t
()

260  
TaskSètus
.
SUCCESS


262 
˛ass
 
	$WeighãdR™domSñe˘‹
(
Task
):

264 
©
 
which
 
poöt
 
ô
 
ªtu∫s
 
SUCCESS
. 
If
 
Æl
 
èsks
 
Áû
, 
a
 
FAILURE


265 
°©us
 
is
 
ªtu∫ed
. 
If
 
a
 
subèsk
 i†
°ûl
 
RUNNING
, 
thí
á RUNNING

266 
°©us
 
is
 
ªtu∫ed
 
™d
 
¥o˚ssög
 
c⁄töues
 
u¡û
 
eôhî
 
SUCCESS


267 
‹
 
FAILURE
 
is
 
ªtu∫ed
 
‰om
 
the
 
subèsk
.

269 
def
 
	$__öô__
(
£lf
, 
«me
, 
weights
, *
¨gs
, **
kw¨gs
):

270 
	`su≥r
(
WeighãdR™domSñe˘‹
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

272 
£lf
.
shufÊed
 = 
FÆ£


273 
£lf
.
weights
 = weights

275 
def
 
	$run
(
£lf
):

276 
nŸ
 
£lf
.
shufÊed
:

277 
shufÊed_chûdªn
 = 
	$weighãd_shufÊe
(
£lf
.
chûdªn
, sñf.
weights
)

278 
£lf
.
shufÊed
 = 
True


280 
c
 
ö
 
shufÊed_chûdªn
:

282 
c
.
°©us
 = c.
	$run
()

284 
c
.
°©us
 !
TaskSètus
.
FAILURE
:

285 
c
.
°©us
 =
TaskSètus
.
SUCCESS
:

286 
£lf
.
shufÊed
 = 
FÆ£


288  
c
.
°©us


290 
£lf
.
shufÊed
 = 
FÆ£


292 
£lf
.
ª£t_a·î
:

293 
£lf
.
	$ª£t
()

295  
TaskSètus
.
FAILURE


297 
˛ass
 
	$Iãøt‹
(
Task
):

299 
Iãøã
 
through
 
Æl
 
chûd
 
èsks
 
ign‹ög
 
Áûuª
.

301 
def
 
	$__öô__
(
£lf
, 
«me
, *
¨gs
, **
kw¨gs
):

302 
	`su≥r
(
Iãøt‹
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

304 
def
 
	$run
(
£lf
):

305 
c
 
ö
 
£lf
.
chûdªn
:

307 
c
.
°©us
 = c.
	$run
()

309 
c
.
°©us
 =
TaskSètus
.
RUNNING
:

310  
c
.
°©us


312 
£lf
.
ª£t_a·î
:

313 
£lf
.
	$ª£t
()

315  
TaskSètus
.
SUCCESS


317 
˛ass
 
	$R™domIãøt‹
(
Task
):

319 
Iãøã
 
through
 
Æl
 
chûd
 
èsks
 
	$øndomly
 (
wôhout
 
ª∂a˚mít
Ë
ign‹ög
 
Áûuª
.

321 
def
 
	$__öô__
(
£lf
, 
«me
, *
¨gs
, **
kw¨gs
):

322 
	`su≥r
(
R™domIãøt‹
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

324 
£lf
.
shufÊed
 = 
FÆ£


326 
def
 
	$run
(
£lf
):

327 
nŸ
 
£lf
.
shufÊed
:

328 
	$shufÊe
(
£lf
.
chûdªn
)

329 
£lf
.
shufÊed
 = 
True


331 
c
 
ö
 
£lf
.
chûdªn
:

333 
c
.
°©us
 = c.
	$run
()

335 
c
.
°©us
 =
TaskSètus
.
RUNNING
:

336  
c
.
°©us


338 
£lf
.
shufÊed
 = 
FÆ£


340 
£lf
.
ª£t_a·î
:

341 
£lf
.
	$ª£t
()

343  
TaskSètus
.
SUCCESS


345 
˛ass
 
	$WeighãdR™domIãøt‹
(
Task
):

347 
Iãøã
 
through
 
Æl
 
chûd
 
èsks
 
	$øndomly
 (
wôhout
 
ª∂a˚mít
Ë
ign‹ög
 
Áûuª
.

349 
def
 
	$__öô__
(
£lf
, 
«me
, 
weights
, *
¨gs
, **
kw¨gs
):

350 
	`su≥r
(
WeighãdR™domIãøt‹
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

352 
£lf
.
shufÊed
 = 
FÆ£


353 
£lf
.
weights
 = weights

355 
def
 
	$run
(
£lf
):

356 
nŸ
 
£lf
.
shufÊed
:

357 
sufÊed_chûdªn
 = 
	$weighãd_shufÊe
(
£lf
.
chûdªn
, sñf.
weights
)

358 
£lf
.
shufÊed
 = 
True


360 
c
 
ö
 
sufÊed_chûdªn
:

362 
c
.
°©us
 = c.
	$run
()

364 
c
.
°©us
 =
TaskSètus
.
RUNNING
:

365  
c
.
°©us


367 
£lf
.
shufÊed
 = 
FÆ£


369 
£lf
.
ª£t_a·î
:

370 
£lf
.
	$ª£t
()

372  
TaskSètus
.
SUCCESS


374 
˛ass
 
	$P¨ÆÀlO√
(
Task
):

376 
A
 
∑øŒñ
 
èsk
 
runs
 
óch
 
chûd
Åask 
	$©
 (
roughly
Ë
the
 
ßme
 
time
.

377 
The
 
P¨ÆÀlO√
 
èsk
 
ªtu∫s
 
suc˚ss
 
as
 
so⁄
á†
™y
 
chûd
 
suc˚eds
.

379 
def
 
	$__öô__
(
£lf
, 
«me
, *
¨gs
, **
kw¨gs
):

380 
	`su≥r
(
P¨ÆÀlO√
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

382 
£lf
.
Áûuª
 = 
	$di˘
()

383 
£lf
.
ödex
 = 0

385 
def
 
	$run
(
£lf
):

386 
n_chûdªn
 = 
	$Àn
(
£lf
.
chûdªn
)

388 
£lf
.
ödex
 < 
n_chûdªn
:

389 
chûd
 = 
£lf
.
chûdªn
[£lf.
ödex
]

390 
chûd
.
°©us
 = chûd.
	$run
()

392 
chûd
.
°©us
 !
TaskSètus
.
SUCCESS
:

393 
£lf
.
ödex
 += 1

395 
chûd
.
°©us
 =
TaskSètus
.
FAILURE
:

396 
£lf
.
Áûuª
[
chûd
.
«me
] = 
TaskSètus
.
FAILURE


398  
TaskSètus
.
RUNNING


400 
£lf
.
ª£t_a·î
:

401 
£lf
.
	$ª£t
()

402 
£lf
.
ödex
 = 0

403  
TaskSètus
.
SUCCESS


405 
ñif
 
	`Àn
(
£lf
.
Áûuª
Ë=
n_chûdªn
:

406 
£lf
.
ª£t_a·î
:

407 
£lf
.
	$ª£t
()

408  
TaskSètus
.
FAILURE


410 
£lf
.
ödex
 = 0

411  
TaskSètus
.
RUNNING


413 
def
 
	$ª£t
(
£lf
):

414 
	`su≥r
(
P¨ÆÀlO√
, 
£lf
).
	$ª£t
()

415 
£lf
.
Áûuª
 = 
	$di˘
()

416 
£lf
.
ödex
 = 0

418 
˛ass
 
	$P¨ÆÀlAŒ
(
Task
):

420 
A
 
∑øŒñ
 
èsk
 
runs
 
óch
 
chûd
Åask 
	$©
 (
roughly
Ë
the
 
ßme
 
time
.

421 
The
 
P¨ÆÀlAŒ
 
èsk
 
ªquúes
 
Æl
 
subèsks
 
to
 
suc˚ed
 
ô
Åo succeed.

423 
def
 
	$__öô__
(
£lf
, 
«me
, *
¨gs
, **
kw¨gs
):

424 
	`su≥r
(
P¨ÆÀlAŒ
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

426 
£lf
.
suc˚ss
 = 
	$di˘
()

427 
£lf
.
ödex
 = 0

429 
def
 
	$run
(
£lf
):

430 
n_chûdªn
 = 
	$Àn
(
£lf
.
chûdªn
)

432 
£lf
.
ödex
 < 
n_chûdªn
:

433 
chûd
 = 
£lf
.
chûdªn
[£lf.
ödex
]

434 
chûd
.
°©us
 = chûd.
	$run
()

436 
chûd
.
°©us
 !
TaskSètus
.
FAILURE
:

437 
£lf
.
ödex
 += 1

439 
chûd
.
°©us
 =
TaskSètus
.
SUCCESS
:

440 
£lf
.
suc˚ss
[
chûd
.
«me
] = 
TaskSètus
.
SUCCESS


442  
TaskSètus
.
RUNNING


444 
£lf
.
ª£t_a·î
:

445 
£lf
.
	$ª£t
()

446  
TaskSètus
.
FAILURE


448 
ñif
 
	`Àn
(
£lf
.
suc˚ss
Ë=
n_chûdªn
:

449 
£lf
.
ª£t_a·î
:

450 
£lf
.
	$ª£t
()

451  
TaskSètus
.
SUCCESS


453 
£lf
.
ödex
 = 0

454  
TaskSètus
.
RUNNING


456 
def
 
	$ª£t
(
£lf
):

457 
	`su≥r
(
P¨ÆÀlAŒ
, 
£lf
).
	$ª£t
()

458 
£lf
.
suc˚ss
 = 
	$di˘
()

459 
£lf
.
ödex
 = 0

461 
˛ass
 
	$Lo›
(
Task
):

463 
Lo›
 
ovî
 
⁄e
 
‹
 
m‹e
 
subèsks
 
the
 
giví
 
numbî
 
of
 
ôî©i⁄s


464 
U£
 
the
 
vÆue
 -1 
to
 
ödiˇã
 
a
 
c⁄töuÆ
 
lo›
.

466 
def
 
	$__öô__
(
£lf
, 
«me
, 
™noun˚
=
True
, *
¨gs
, **
kw¨gs
):

467 
	`su≥r
(
Lo›
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

469 
£lf
.
ôî©i⁄s
 = 
kw¨gs
['iterations']

470 
£lf
.
_™noun˚
 = 
™noun˚


471 
£lf
.
lo›_cou¡
 = 0

472 
£lf
.
«me
 =Çame

473 
	`¥öt
("Lo› iãøti⁄s: " + 
	$°r
(
£lf
.
ôî©i⁄s
))

475 
def
 
	$run
(
£lf
):

477 
c
 = 
£lf
.
chûdªn
[0]

479 
£lf
.
ôî©i⁄s
 =-1 
‹
 sñf.
lo›_cou¡
 < self.iterations:

480 
c
.
°©us
 = c.
	$run
()

482 
°©us
 = 
c
.status

484 
£lf
.
°©us
 = status

486 
°©us
 =
TaskSètus
.
SUCCESS
 
‹
 sètu†=TaskSètus.
FAILURE
:

487 
£lf
.
lo›_cou¡
 += 1

489 
£lf
.
_™noun˚
:

490 
	`¥öt
(
£lf
.
«me
 + " COMPLETED " + 
	`°r
(£lf.
lo›_cou¡
) + " LOOP(S)")

492 
c
.
	$ª£t
()

494  
°©us


496 
˛ass
 
	$Limô
(
Task
):

498 
Limô
 
the
 
numbî
 
of
 
times
 
a
 
èsk
 
ˇn
 
execuã


500 
def
 
	$__öô__
(
£lf
, 
«me
, 
™noun˚
=
True
, *
¨gs
, **
kw¨gs
):

501 
	`su≥r
(
Limô
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

503 
£lf
.
max_executi⁄s
 = 
kw¨gs
['max_executions']

504 
£lf
.
_™noun˚
 = 
™noun˚


505 
£lf
.
executi⁄_cou¡
 = 0

506 
£lf
.
«me
 =Çame

507 
	`¥öt
("LimôÇumbî o‡executi⁄†to: " + 
	$°r
(
£lf
.
max_executi⁄s
))

509 
def
 
	$run
(
£lf
):

510 
c
 = 
£lf
.
chûdªn
[0]

512 
£lf
.
executi⁄_cou¡
 >£lf.
max_executi⁄s
:

514 
£lf
.
_™noun˚
:

515 
	`¥öt
(
£lf
.
«me
 + "Ñóched maximumÇumbî (" + 
	`°r
(£lf.
max_executi⁄s
) + ") ofÉxecutions.")

517 
£lf
.
ª£t_a·î
:

518 
£lf
.
	$ª£t
()

520  
TaskSètus
.
FAILURE


522 
c
.
°©us
 = c.
	$run
()

524 
c
.
°©us
 !
TaskSètus
.
RUNNING
:

525 
£lf
.
executi⁄_cou¡
 += 1

527  
c
.
°©us


529 
def
 
	$ª£t
(
£lf
):

530 
c
 = 
£lf
.
chûdªn
[0]

531 
c
.
	$ª£t
()

532 
£lf
.
executi⁄_cou¡
 = 0

533 
£lf
.
°©us
 = 
N⁄e


535 
˛ass
 
	$Ign‹eFaûuª
(
Task
):

537 
Always
  
eôhî
 
RUNNING
 
‹
 
SUCCESS
.

539 
def
 
	$__öô__
(
£lf
, 
«me
, *
¨gs
, **
kw¨gs
):

540 
	`su≥r
(
Ign‹eFaûuª
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

542 
def
 
	$run
(
£lf
):

544 
c
 
ö
 
£lf
.
chûdªn
:

546 
c
.
°©us
 = c.
	$run
()

548 
c
.
°©us
 =
TaskSètus
.
FAILURE
:

549  
TaskSètus
.
SUCCESS


551  
c
.
°©us


553  
TaskSètus
.
SUCCESS


556 
˛ass
 
	$AlwaysFaû
(
Task
):

558 
Always
  
FAILURE


560 
def
 
	$__öô__
(
£lf
, 
«me
, *
¨gs
, **
kw¨gs
):

561 
	`su≥r
(
AlwaysFaû
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

563 
def
 
	$run
(
£lf
):

565 
c
 
ö
 
£lf
.
chûdªn
:

567 
c
.
°©us
 = c.
	$run
()

569  
c
.
°©us


571  
TaskSètus
.
FAILURE


573 
˛ass
 
	$AlwaysSuc˚ed
(
Task
):

575 
Always
  
SUCCESS


577 
def
 
	$__öô__
(
£lf
, 
«me
, *
¨gs
, **
kw¨gs
):

578 
	`su≥r
(
AlwaysSuc˚ed
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

580 
def
 
	$run
(
£lf
):

582 
c
 
ö
 
£lf
.
chûdªn
:

584 
c
.
°©us
 = c.
	$run
()

586  
c
.
°©us


588  
TaskSètus
.
SUCCESS


591 
˛ass
 
	$Invît
(
Task
):

593 
Tu∫
 
SUCCESS
 
öto
 
FAILURE
 
™d
 
vi˚
-
vîß


595 
def
 
	$__öô__
(
£lf
, 
«me
, *
¨gs
, **
kw¨gs
):

596 
	`su≥r
(
Invît
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

598 
def
 
	$run
(
£lf
):

600 
c
 
ö
 
£lf
.
chûdªn
:

602 
c
.
°©us
 = c.
	$run
()

604 
c
.
°©us
 =
TaskSètus
.
FAILURE
:

605  
TaskSètus
.
SUCCESS


607 
ñif
 
c
.
°©us
 =
TaskSètus
.
SUCCESS
:

608  
TaskSètus
.
FAILURE


611  
c
.
°©us


613 #Alü†
TaskNŸ
 
to
 
Invît
 
backw¨ds
 
com∑tibûôy


614 
TaskNŸ
 = 
Invît


616 
˛ass
 
	$U¡ûFaûuª
(
Task
):

618 
C⁄töue
 
executög
 
a
 
èsk
 
u¡û
 
ô
 
Áûs
 
‹
 
max_©ãm±s
 
is
 
ªached
.

620 
def
 
	`__öô__
(
£lf
, 
«me
, 
max_©ãm±s
=-1, *
¨gs
, **
kw¨gs
):

621 
	`su≥r
(
U¡ûFaûuª
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

623 
£lf
.
max_©ãm±s
 = max_attempts

624 
£lf
.
©ãm±s
 = 0

626 
def
 
	$run
(
£lf
):

627 
c
 = 
£lf
.
chûdªn
[0]

629 
£lf
.
©ãm±s
 < sñf.
max_©ãm±s
 
‹
 self.max_attempts == -1:

631 
c
.
°©us
 = c.
	$run
()

633 
c
.
°©us
 =
TaskSètus
.
FAILURE
:

634  
TaskSètus
.
SUCCESS


636 
c
.
°©us
 =
TaskSètus
.
SUCCESS
:

637 
£lf
.
©ãm±s
 += 1

638 
c
.
	$ª£t
()

640  
TaskSètus
.
RUNNING


642  
TaskSètus
.
FAILURE


644 
def
 
	$ª£t
(
£lf
):

645 
c
 = 
£lf
.
chûdªn
[0]

646 
c
.
	$ª£t
()

647 
£lf
.
©ãm±s
 = 0

649 #Alü†
U¡ûFaû
 
to
 
U¡ûFaûuª
 
backw¨ds
 
com∑tibûôy


650 
U¡ûFaû
 = 
U¡ûFaûuª


652 
˛ass
 
	$U¡ûSuc˚ss
(
Task
):

654 
C⁄töue
 
executög
 
a
 
èsk
 
u¡û
 
ô
 
suc˚eds
 
‹
 
max_©ãm±s
 
is
 
ªached
.

656 
def
 
	`__öô__
(
£lf
, 
«me
, 
max_©ãm±s
=-1, *
¨gs
, **
kw¨gs
):

657 
	`su≥r
(
U¡ûSuc˚ss
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

659 
£lf
.
max_©ãm±s
 = max_attempts

660 
£lf
.
©ãm±s
 = 0

662 
def
 
	$run
(
£lf
):

663 
c
 = 
£lf
.
chûdªn
[0]

665 
£lf
.
©ãm±s
 < sñf.
max_©ãm±s
 
‹
 self.max_attempts == -1:

667 
c
.
°©us
 = c.
	$run
()

669 
c
.
°©us
 =
TaskSètus
.
SUCCESS
:

670  
TaskSètus
.
SUCCESS


672 
c
.
°©us
 =
TaskSètus
.
FAILURE
:

673 
£lf
.
©ãm±s
 += 1

674 
c
.
	$ª£t
()

676  
TaskSètus
.
RUNNING


678 
£lf
.
ª£t_a·î
:

679 
£lf
.
	$ª£t
()

681  
TaskSètus
.
FAILURE


683 
def
 
	$ª£t
(
£lf
):

684 
c
 = 
£lf
.
chûdªn
[0]

685 
c
.
	$ª£t
()

686 
£lf
.
©ãm±s
 = 0

688 
˛ass
 
	$AutoRemoveSequí˚
(
Task
):

690 
Remove
 
óch
 
suc˚ssful
 
subèsk
 
‰om
 
a
 
£quí˚


692 
def
 
	$__öô__
(
£lf
, 
«me
, *
¨gs
, **
kw¨gs
):

693 
	`su≥r
(
AutoRemoveSequí˚
, 
£lf
).
	$__öô__
(
«me
, *
¨gs
, **
kw¨gs
)

695 
def
 
	$run
(
£lf
):

696 
c
 
ö
 
£lf
.
chûdªn
:

697 
c
.
°©us
 = c.
	$run
()

699 
c
.
°©us
 =
TaskSètus
.
FAILURE
:

700  
TaskSètus
.
FAILURE


702 
c
.
°©uss
 =
TaskSètus
.
RUNNING
:

703  
TaskSètus
.
RUNNING


705 
åy
:

706 
£lf
.
chûdªn
.
	$ªmove
(
£lf
.
chûdªn
[0])

707 
ex˚±
:

708  
TaskSètus
.
FAILURE


710  
TaskSètus
.
SUCCESS


712 
˛ass
 
	$CÆlbackTask
(
Task
):

714 
Tu∫
 
™y
 
ˇŒback
 
	$fun˘i⁄
 (
cb
Ë
öto
 
a
 
èsk


716 
def
 
	`__öô__
(
£lf
, 
«me
, 
cb
=
N⁄e
, 
cb_¨gs
=[], 
cb_kw¨gs
={
	}
}, **
	gkw¨gs
):

717 
su≥r
(
CÆlbackTask
, 
£lf
).
__öô__
(
«me
, 
cb
=
N⁄e
, 
cb_¨gs
=[], 
cb_kw¨gs
={}, **
kw¨gs
)

719 
	g£lf
.
	g«me
 = 
«me


720 
£lf
.
cb
 = cb

721 
£lf
.
cb_¨gs
 = cb_args

722 
£lf
.
cb_kw¨gs
 = cb_kwargs

724 
def
 
	$run
(
£lf
):

725 
°©us
 = 
£lf
.
	$cb
(*
£lf
.
cb_¨gs
, **£lf.
cb_kw¨gs
)

727 
°©us
 
is
 
N⁄e
:

728 
£lf
.
°©us
 = 
TaskSètus
.
RUNNING


730 
ñif
 
°©us
:

731 
£lf
.
°©us
 = 
TaskSètus
.
SUCCESS


734 
£lf
.
°©us
 = 
TaskSètus
.
FAILURE


736  
£lf
.
°©us


738 
def
 
	$ª£t
(
£lf
):

739 
£lf
.
°©us
 = 
N⁄e


741 
˛ass
 
	$WaôTask
(
Task
):

743 
This
 
is
 
a
 *
blockög
* 
waô
 
èsk
. 
The
 
öãrvÆ
 
¨gumít
 i†
ö
 
£c⁄ds
.

745 
def
 
	$__öô__
(
£lf
, 
«me
, 
öãrvÆ
, *
¨gs
, **
kw¨gs
):

746 
	`su≥r
(
WaôTask
, 
£lf
).
	$__öô__
(
«me
, 
öãrvÆ
, *
¨gs
, **
kw¨gs
)

748 
£lf
.
öãrvÆ
 = interval

750 
def
 
	$run
(
£lf
):

751 
	$¶ìp
(
£lf
.
öãrvÆ
)

753  
TaskSètus
.
SUCCESS


755 
˛ass
 
	$lo›
(
Task
):

757 
Lo›
 
ovî
 
⁄e
 
‹
 
m‹e
 
subèsks
 
a
 
giví
 
numbî
 
of
 
ôî©i⁄s


759 
def
 
	`__öô__
(
£lf
, 
èsk
, 
ôî©i⁄s
=-1):

760 
√w_«me
 = 
èsk
.
«me
 + "_lo›_" + 
	$°r
(
ôî©i⁄s
)

761 
	`su≥r
(
lo›
, 
£lf
).
	$__öô__
(
√w_«me
)

763 
£lf
.
ôî©i⁄s
 = iterations

764 
£lf
.
ﬁd_run
 = 
èsk
.
run


765 
£lf
.
ﬁd_ª£t
 = 
èsk
.
ª£t


766 
£lf
.
ﬁd_chûdªn
 = 
èsk
.
chûdªn


767 
£lf
.
lo›_cou¡
 = 0

769 
	`¥öt
("Lo› iãøti⁄s: " + 
	$°r
(
£lf
.
ôî©i⁄s
))

771 
def
 
	$run
(
£lf
):

772 
£lf
.
ôî©i⁄s
 !-1 
™d
 sñf.
lo›_cou¡
 >= self.iterations:

773  
TaskSètus
.
SUCCESS


775 
	`¥öt
("Lo› " + 
	`°r
(
£lf
.
lo›_cou¡
 + 1))

777 
True
:

778 
£lf
.
°©us
 = sñf.
	$ﬁd_run
()

780 
£lf
.
°©us
 =
TaskSètus
.
SUCCESS
:

783  
£lf
.
°©us


785 
£lf
.
	$ﬁd_ª£t
()

786 
£lf
.
lo›_cou¡
 += 1

788 
˛ass
 
	$limô
(
Task
):

790 
Limô
 
a
 
èsk
 
to
 
the
 
giví
 
numbî
 
of
 
executi⁄s


792 
def
 
	`__öô__
(
£lf
, 
èsk
, 
max_executi⁄s
=-1):

793 
√w_«me
 = 
èsk
.
«me
 + "_limô_" + 
	$°r
(
max_executi⁄s
)

794 
	`su≥r
(
limô
, 
£lf
).
	$__öô__
(
√w_«me
)

796 
£lf
.
max_executi⁄s
 = max_executions

797 
£lf
.
ﬁd_run
 = 
èsk
.
run


798 
£lf
.
ﬁd_ª£t
 = 
èsk
.
ª£t


799 
£lf
.
ﬁd_chûdªn
 = 
èsk
.
chûdªn


800 
£lf
.
executi⁄_cou¡
 = 0

802 
	`¥öt
("LimôÇumbî o‡executi⁄†to: " + 
	$°r
(
£lf
.
max_executi⁄s
))

804 
def
 
	$run
(
£lf
):

805 
£lf
.
max_executi⁄s
 !-1 
™d
 sñf.
executi⁄_cou¡
 >= self.max_executions:

806 
£lf
.
executi⁄_cou¡
 = 0

808 
£lf
.
_™noun˚
:

809 
	`¥öt
(
£lf
.
«me
 + "Ñóched maximumÇumbî (" + 
	`°r
(£lf.
max_executi⁄s
) + ") ofÉxecutions.")

811  
TaskSètus
.
FAILURE


813 
True
:

814 
£lf
.
°©us
 = sñf.
	$ﬁd_run
()

816 
£lf
.
°©us
 =
TaskSètus
.
SUCCESS
:

819  
£lf
.
°©us


821 
£lf
.
	$ﬁd_ª£t
()

822 
£lf
.
executi⁄_cou¡
 += 1

824 
˛ass
 
	$ign‹e_Áûuª
(
Task
):

826 
Always
  
eôhî
 
RUNNING
 
‹
 
SUCCESS
.

828 
def
 
	$__öô__
(
£lf
, 
èsk
):

829 
√w_«me
 = 
èsk
.
«me
 + "_ignore_failure"

830 
	`su≥r
(
ign‹e_Áûuª
, 
£lf
).
	$__öô__
(
√w_«me
)

832 
£lf
.
ﬁd_run
 = 
èsk
.
run


834 
def
 
	$run
(
£lf
):

835 
True
:

836 
£lf
.
°©us
 = sñf.
	$ﬁd_run
()

838 
£lf
.
°©us
 =
TaskSètus
.
FAILURE
:

839  
TaskSètus
.
SUCCESS


841  
£lf
.
°©us


843 
˛ass
 
	$ign‹e_suc˚ss
(
Task
):

845 
Always
  
FAILURE
 
‹
 
RUNNING


847 
def
 
	$__öô__
(
£lf
, 
èsk
):

848 
√w_«me
 = 
èsk
.
«me
 + "_ignore_success"

849 
	`su≥r
(
ign‹e_suc˚ss
, 
£lf
).
	$__öô__
(
√w_«me
)

851 
£lf
.
ﬁd_run
 = 
èsk
.
run


853 
def
 
	$run
(
£lf
):

854 
True
:

855 
£lf
.
°©us
 = sñf.
	$ﬁd_run
()

857 
£lf
.
°©us
 =
TaskSètus
.
SUCCESS
:

858  
TaskSètus
.
FAILURE


860  
£lf
.
°©us


862 
˛ass
 
	$èsk_nŸ
(
Task
):

864 
Tu∫
 
SUCCESS
 
öto
 
FAILURE
 
™d
 
vi˚
-
vîß


866 
def
 
	$__öô__
(
£lf
, 
èsk
):

867 
√w_«me
 = 
èsk
.
«me
 + "_not"

868 
	`su≥r
(
èsk_nŸ
, 
£lf
).
	$__öô__
(
√w_«me
)

870 
£lf
.
ﬁd_run
 = 
èsk
.
run


872 
def
 
	$run
(
£lf
):

873 
True
:

874 
£lf
.
°©us
 = sñf.
	$ﬁd_run
()

876 
£lf
.
°©us
 =
TaskSètus
.
FAILURE
:

877  
TaskSètus
.
SUCCESS


879 
ñif
 
£lf
.
°©us
 =
TaskSètus
.
SUCCESS
:

880  
TaskSètus
.
FAILURE


883  
£lf
.
°©us


885 #Alü†
èsk_nŸ
 
to
 
övît
 
which
 
£ems
 
m‹e
 
ötuôive


886 
övît
 = 
èsk_nŸ


888 
˛ass
 
	$u¡û_Áû
(
Task
):

890 
Execuã
 
a
 
èsk
 
u¡û
 
ô
 
Áûs


892 
def
 
	$__öô__
(
£lf
, 
èsk
):

893 
√w_«me
 = 
èsk
.
«me
 + "_until_fail"

894 
	`su≥r
(
u¡û_Áû
, 
£lf
).
	$__öô__
(
√w_«me
)

896 
£lf
.
ﬁd_run
 = 
èsk
.
run


898 
def
 
	$run
(
£lf
):

899 
True
:

900 
£lf
.
°©us
 = sñf.
	$ﬁd_run
()

902 
£lf
.
°©us
 =
TaskSètus
.
FAILURE
:

906  
£lf
.
°©us


908  
TaskSètus
.
SUCCESS


910 
˛ass
 
	$Æways_Áû
(
Task
):

912 
Execuã
 
a
 
èsk
 
but
 
Æways
  
FAILTURE


914 
def
 
	$__öô__
(
£lf
, 
èsk
):

915 
√w_«me
 = 
èsk
.
«me
 + "_always_fail"

916 
	`su≥r
(
Æways_Áû
, 
£lf
).
	$__öô__
(
√w_«me
)

918 
£lf
.
ﬁd_run
 = 
èsk
.
run


920 
def
 
	$run
(
£lf
):

921 
True
:

922 
£lf
.
	$ﬁd_run
()

924 
£lf
.
°©us
 = 
TaskSètus
.
FAILURE


926  
TaskSètus
.
FAILURE


929 
def
 
	$¥öt_åì
(
åì
, 
ödít
=0, 
u£_symbﬁs
=
FÆ£
):

931 
Pröt
 
™
 
ASCII
 
ª¥e£¡©i⁄
 
of
 
the
 
åì


933 
u£_symbﬁs
:

934 
ödít
 == 0:

935 
	$¥öt_åì_symbﬁ
(
åì
, 
ödít
)

936 
ödít
 += 1

938 
c
 
ö
 
åì
.
chûdªn
:

939 
	$¥öt_åì_symbﬁ
(
c
, 
ödít
)

941 
åy
:

942 
c
.
chûdªn
 != []:

943 
	`¥öt_åì
(
c
, 
ödít
+1, 
u£_symbﬁs
)

944 
ex˚±
:

945 
∑ss


947 
c
 
ö
 
åì
.
chûdªn
:

948 
¥öt
 " " * 
ödít
, "-->", 
c
.
«me


950 
åy
:

951 
c
.
chûdªn
 != []:

952 
	`¥öt_åì
(
c
, 
ödít
 + 1)

953 
ex˚±
:

954 
∑ss


956 
def
 
	$¥öt_åì_symbﬁ
(
c
, 
ödít
):

958 
U£
 
ASCII
 
symbﬁs
 
to
 
ª¥e£¡
 
Sequí˚
, 
Sñe˘‹
, 
Task
, 
ëc
.

960 
	$isö°™˚
(
c
, 
Sñe˘‹
):

961 
¥öt
 " " * 
ödít
, "--?",

962 
ñif
 
	`isö°™˚
(
c
, (
Sequí˚
, 
Iãøt‹
)):

963 
¥öt
 " " * 
ödít
, "-->",

964 
ñif
 
	`isö°™˚
(
c
, (
R™domSequí˚
, 
R™domIãøt‹
, 
WeighãdR™domSequí˚
, 
WeighãdR™domIãøt‹
)):

965 
¥öt
 " " * 
ödít
, "~~>",

966 
ñif
 
	`isö°™˚
(
c
, (
R™domSñe˘‹
, 
WeighãdR™domSñe˘‹
)):

967 
¥öt
 " " * 
ödít
, "~~?",

968 
ñif
 
	$isö°™˚
(
c
, 
P¨ÆÀlO√
):

969 
¥öt
 " " * 
ödít
, "==?",

970 
ñif
 
	$isö°™˚
(
c
, 
P¨ÆÀlAŒ
):

971 
¥öt
 " " * 
ödít
, "==>",

972 
ñif
 
	$isö°™˚
(
c
, 
Lo›
):

973 
¥öt
 " " * 
ödít
, "<->",

974 
ñif
 
	$isö°™˚
(
c
, 
Invît
):

975 
¥öt
 " " * 
ödít
, "--!",

977 
¥öt
 " " * 
ödít
, "--|",

979 
¥öt
 
c
.
«me


981 
def
 
	$¥öt_phpsy¡ax_åì
(
åì
):

983 
Pröt
 
™
 
ouçut
 
com∑tibÀ
 
wôh
 
ú⁄¸ìk
.
√t
/
phpSy¡axTªe


985 
c
 
ö
 
åì
.
chûdªn
:

986 
¥öt
 "[" + 
°rög
.
	`ª∂a˚
(
c
.
«me
, "_", "."),

987 
c
.
chûdªn
 != []:

988 
	`¥öt_phpsy¡ax_åì
(
c
),

989 
¥öt
 "]",

991 #de‡
	`¥öt_dŸ_åì
(
roŸ
, 
dŸfûï©h
=
N⁄e
):

993 #Pröà
™
 
ouçut
 
com∑tibÀ
 
wôh
 
the
 
DOT
 
sy«èx
 
™d
 
Gøphiz


995 #g∏
pgv
.
	`AGøph
(
°ri˘
=
True
, 
dúe˘ed
=True, 
rŸ©e
='0', 
bgcﬁ‹
='whôe', 
‹dîög
="out")

996 #gr.
node_©å
['fontsize'] = '9'

997 #gr.
node_©å
['color'] = 'black'

998 #
#i‡
dŸfûï©h
 
is
 
N⁄e
:

1000 #dŸfûï©h = 
os
.
∑th
.
	`ex∑ndu£r
('~') + '/.ros/tree.dot'

1001 #
#globÆ 
œ°_dŸ_åì


1003 #
## 
Add
 
the
 
roŸ
 
node


1005 #gr.
	`add_node
(
roŸ
.
«me
)

1006 #nodê
gr
.
	`gë_node
(
roŸ
.
«me
)

1007 #
#i‡
roŸ
.
°©us
 =
TaskSètus
.
RUNNING
:

1009 #node.
©å
['fillcolor'] = 'yellow'

1010 #node.
©å
['style'] = 'filled'

1011 #node.
©å
['border'] = 'bold'

1012 #ñi‡
roŸ
.
°©us
 =
TaskSètus
.
SUCCESS
:

1013 #node.
©å
['color'] = 'green'

1014 #ñi‡
roŸ
.
°©us
 =
TaskSètus
.
FAILURE
:

1015 #node.
©å
['color'] = 'red'

1017 #node.
©å
['color'] = 'black'

1018 #
#de‡
	`add_edges
(
roŸ
):

1020 #f‹ 
c
 
ö
 
roŸ
.
chûdªn
:

1021 #i‡
	`isö°™˚
(
c
, (
Sequí˚
, 
Iãøt‹
, 
R™domSequí˚
, 
R™domIãøt‹
, 
WeighãdR™domSequí˚
, 
WeighãdR™domIãøt‹
)):

1022 #gr.
	`add_node
(
c
.
«me
, 
sh≠e
="cds")

1023 #ñi‡
	`isö°™˚
(
c
, (
Sñe˘‹
, 
R™domSñe˘‹
, 
WeighãdR™domSñe˘‹
)):

1024 #gr.
	`add_node
(
c
.
«me
, 
sh≠e
="diamond")

1025 #ñi‡
	`isö°™˚
(
c
, (
P¨ÆÀlO√
, 
P¨ÆÀlAŒ
)):

1026 #gr.
	`add_node
(
c
.
«me
, 
sh≠e
="parallelogram")

1027 #ñi‡
	`isö°™˚
(
c
, 
Invît
):

1028 #gr.
	`add_node
(
c
.
«me
, 
sh≠e
="house")

1030 #gr.
	`add_node
(
c
.
«me
)

1031 #
#gr.
	`add_edge
((
roŸ
.
«me
, 
c
.name))

1033 #nodê
gr
.
	`gë_node
(
c
.
«me
)

1034 #
#i‡
c
.
°©us
 =
TaskSètus
.
RUNNING
:

1036 #node.
©å
['fillcolor'] = 'yellow'

1037 #node.
©å
['style'] = 'filled'

1038 #node.
©å
['border'] = 'bold'

1039 #ñi‡
c
.
°©us
 =
TaskSètus
.
SUCCESS
:

1040 #node.
©å
['color'] = 'green'

1041 #ñi‡
c
.
°©us
 =
TaskSètus
.
FAILURE
:

1042 #node.
©å
['color'] = 'red'

1044 #node.
©å
['color'] = 'black'

1045 #
#i‡
c
.
chûdªn
 != []:

1047 #add_edges(
c
)

1048 #
#add_edges(
roŸ
)

1050 #
#cuºít_dŸ_åì = 
gr
.
	`°rög
()

1052 #
#i‡
cuºít_dŸ_åì
 !
œ°_dŸ_åì
:

1054 #gr.
	`wrôe
(
dŸfûï©h
)

1055 #œ°_dŸ_åì = 
gr
.
	`°rög
()

	@/home/xd/project/xd_robot/xd_robot_test/src/pi_trees_lib/src/pi_trees_lib/task_setup.py

1 #!/
u§
/
bö
/
ív
 
pyth⁄


3 
imp‹t
 
ro•y


4 
imp‹t
 
a˘i⁄lib


5 
‰om
 
a˘i⁄lib
 
imp‹t
 
GﬂlSètus


6 
‰om
 
	ggeomëry_msgs
.
msg
 
imp‹t
 
	gPo£
, 
	gPoöt
, 
	gQu©îni⁄
, 
Twi°


7 
‰om
 
	gmove_ba£_msgs
.
msg
 
imp‹t
 
	gMoveBa£A˘i⁄
, 
	gMoveBa£Gﬂl
, 
MoveBa£A˘i⁄Fìdback


8 
‰om
 
	gtf
.
å™sf‹m©i⁄s
 
imp‹t
 
qu©îni⁄_‰om_euÀr


9 
‰om
 
	gvisuÆiz©i⁄_msgs
.
msg
 
imp‹t
 
M¨kî


10 
‰om
 
m©h
 
imp‹t
 
pi


11 
‰om
 
cﬁÀ˘i⁄s
 
imp‹t
 
OrdîedDi˘


13 
def
 
	$£tup_èsk_ívú⁄mít
(
£lf
):

14 #How 
big
 
is
 
the
 
squ¨e
 
we
 
w™t
Åhê
robŸ
 
to
 
∑åﬁ
?

15 
£lf
.
squ¨e_size
 = 
ro•y
.
	`gë_∑øm
("~square_size", 1.0) #meters

17 #Së 
the
 
low
 
b©ãry
 
	`thªshﬁd
 (
bëwìn
 0 
™d
 100)

18 
£lf
.
low_b©ãry_thªshﬁd
 = 
ro•y
.
	`gë_∑øm
('~low_battery_threshold', 50)

20 #How 
m™y
 
times
 
should
 
we
 
execuã
 
the
 
∑åﬁ
 
lo›


21 
£lf
.
n_∑åﬁs
 = 
ro•y
.
	`gë_∑øm
("~n_patrols", 2) #meters

23 #How dÿ
we
 
have
 
to
 
gë
Åÿ
óch
 
waypoöt
?

24 
£lf
.
move_ba£_timeout
 = 
ro•y
.
	`gë_∑øm
("~move_base_timeout", 10) #seconds

26 #Inôülizê
the
 
∑åﬁ
 
cou¡î


27 
£lf
.
∑åﬁ_cou¡
 = 0

29 #Subs¸ibê
to
 
the
 
move_ba£
 
a˘i⁄
 
£rvî


30 
£lf
.
move_ba£
 = 
a˘i⁄lib
.
	`Sim∂eA˘i⁄Clõ¡
("move_ba£", 
MoveBa£A˘i⁄
)

32 
ro•y
.
	`logöfo
("Waiting for move_baseáction server...")

34 #Waô 
up
 
to
 60 
£c⁄ds
 
the
 
a˘i⁄
 
£rvî
Åÿ
become
 
avaûabÀ


35 
£lf
.
move_ba£
.
	`waô_f‹_£rvî
(
ro•y
.
	$Duøti⁄
(60))

37 
ro•y
.
	`logöfo
("ConnectedÅo move_baseáction server")

39 #Cª©ê
a
 
li°
 
to
 
hﬁd
 
the
 
èrgë
 
	`qu©îni⁄s
 (
‹õ¡©i⁄s
)

40 
qu©îni⁄s
 = 
	$li°
()

42 #Fú° 
deföe
 
the
 
c‹√r
 
‹õ¡©i⁄s
 
as
 
EuÀr
 
™gÀs


43 
euÀr_™gÀs
 = (
pi
/2,Öi, 3*pi/2, 0)

45 #Thí 
c⁄vît
 
the
 
™gÀs
 
to
 
qu©îni⁄s


46 
™gÀ
 
ö
 
euÀr_™gÀs
:

47 
q_™gÀ
 = 
	`qu©îni⁄_‰om_euÀr
(0, 0, 
™gÀ
, 
axes
='sxyz')

48 
q
 = 
	$Qu©îni⁄
(*
q_™gÀ
)

49 
qu©îni⁄s
.
	$≠≥nd
(
q
)

51 #Cª©ê
a
 
li°
 
to
 
hﬁd
 
the
 
waypoöt
 
po£s


52 
£lf
.
waypoöts
 = 
	$li°
()

54 #Aµíd 
óch
 
of
 
the
 
four
 
waypoöts
 
to
Åhê
li°
. 
Each
 
waypoöt


55 #i†
a
 
po£
 
c⁄si°ög
 
of
á 
posôi⁄
 
™d
 
‹õ¡©i⁄
 
ö
 
the
 
m≠
 
‰ame
.

56 
£lf
.
waypoöts
.
	`≠≥nd
(
	`Po£
(
	`Poöt
(0.0, 0.0, 0.0), 
qu©îni⁄s
[3]))

57 
£lf
.
waypoöts
.
	`≠≥nd
(
	`Po£
(
	`Poöt
(£lf.
squ¨e_size
, 0.0, 0.0), 
qu©îni⁄s
[0]))

58 
£lf
.
waypoöts
.
	`≠≥nd
(
	`Po£
(
	`Poöt
(£lf.
squ¨e_size
, sñf.squ¨e_size, 0.0), 
qu©îni⁄s
[1]))

59 
£lf
.
waypoöts
.
	`≠≥nd
(
	`Po£
(
	`Poöt
(0.0, sñf.
squ¨e_size
, 0.0), 
qu©îni⁄s
[2]))

61 #Cª©ê
a
 
m≠pög
 
of
 
room
 
«mes
 
to
 
waypoöt
 
loˇti⁄s


62 
room_loˇti⁄s
 = (('hÆlway', 
£lf
.
waypoöts
[0]),

63 ('livög_room', 
£lf
.
waypoöts
[1]),

64 ('kôchí', 
£lf
.
waypoöts
[2]),

65 ('b©hroom', 
£lf
.
waypoöts
[3]))

67 #St‹ê
the
 
m≠pög
 
as
 
™
 
‹dîed
 
di˘i⁄¨y
 
so
 
we
 
ˇn
 
visô
Åhê
rooms
 
ö
 
£quí˚


68 
£lf
.
room_loˇti⁄s
 = 
	$OrdîedDi˘
(
room_loˇti⁄s
)

70 #Whîê
is
 
the
 
dockög
 
°©i⁄
?

71 
£lf
.
dockög_°©i⁄_po£
 = (
	`Po£
(
	`Poöt
(0.5, 0.5, 0.0), 
	$Qu©îni⁄
(0.0, 0.0, 0.0, 1.0)))

73 #Inôülizê
the
 
waypoöt
 
visuÆiz©i⁄
 
m¨kîs
 
RViz


74 
	$öô_waypoöt_m¨kîs
(
£lf
)

76 #Së 
a
 
visuÆiz©i⁄
 
m¨kî
 
©
 
óch
 
waypoöt


77 
waypoöt
 
ö
 
£lf
.
waypoöts
:

78 
p
 = 
	$Poöt
()

79 
p
 = 
waypoöt
.
posôi⁄


80 
£lf
.
waypoöt_m¨kîs
.
poöts
.
	$≠≥nd
(
p
)

82 #Së 
a
 
m¨kî
 
the
 
dockög
 
°©i⁄


83 
	$öô_dockög_°©i⁄_m¨kî
(
£lf
)

85 #Publishî 
to
 
m™uÆly
 
c⁄åﬁ
 
the
 
	`robŸ
 (
e
.
g
.Åÿ
°›
 
ô
)

86 
£lf
.
cmd_vñ_pub
 = 
ro•y
.
	`Publishî
('cmd_vñ', 
Twi°
, 
queue_size
=5)

88 
ro•y
.
	`logöfo
("Starting Tasks")

90 #Publish 
the
 
waypoöt
 
m¨kîs


91 
£lf
.
m¨kî_pub
.
	$publish
(
£lf
.
waypoöt_m¨kîs
)

92 
ro•y
.
	$¶ìp
(1)

93 
£lf
.
m¨kî_pub
.
	$publish
(
£lf
.
waypoöt_m¨kîs
)

95 #Publish 
the
 
dockög
 
°©i⁄
 
m¨kî


96 
£lf
.
dockög_°©i⁄_m¨kî_pub
.
	$publish
(
£lf
.
dockög_°©i⁄_m¨kî
)

97 
ro•y
.
	$¶ìp
(1)

99 
def
 
	$öô_waypoöt_m¨kîs
(
£lf
):

100 #Së 
up
 
our
 
waypoöt
 
m¨kîs


101 
m¨kî_sˇÀ
 = 0.2

102 
m¨kî_li„time
 = 0 #0 
is
 
f‹evî


103 
m¨kî_ns
 = 'waypoints'

104 
m¨kî_id
 = 0

105 
m¨kî_cﬁ‹
 = {'r': 1.0, 'g': 0.7, 'b': 1.0, 'a': 1.0
	}
}

107 #Deföê
a
 
m¨kî
 
publishî
.

108 
£lf
.
m¨kî_pub
 = 
ro•y
.
Publishî
('waypoöt_m¨kîs', 
M¨kî
, 
queue_size
=5)

110 #Inôülizê
the
 
m¨kî
 
poöts
 
li°
.

111 
£lf
.
waypoöt_m¨kîs
 = 
	$M¨kî
()

112 
£lf
.
waypoöt_m¨kîs
.
ns
 = 
m¨kî_ns


113 
£lf
.
waypoöt_m¨kîs
.
id
 = 
m¨kî_id


114 
£lf
.
waypoöt_m¨kîs
.
ty≥
 = 
M¨kî
.
CUBE_LIST


115 
£lf
.
waypoöt_m¨kîs
.
a˘i⁄
 = 
M¨kî
.
ADD


116 
£lf
.
waypoöt_m¨kîs
.
li„time
 = 
ro•y
.
	$Duøti⁄
(
m¨kî_li„time
)

117 
£lf
.
waypoöt_m¨kîs
.
sˇÀ
.
x
 = 
m¨kî_sˇÀ


118 
£lf
.
waypoöt_m¨kîs
.
sˇÀ
.
y
 = 
m¨kî_sˇÀ


119 
£lf
.
waypoöt_m¨kîs
.
cﬁ‹
.
r
 = 
m¨kî_cﬁ‹
['r']

120 
£lf
.
waypoöt_m¨kîs
.
cﬁ‹
.
g
 = 
m¨kî_cﬁ‹
['g']

121 
£lf
.
waypoöt_m¨kîs
.
cﬁ‹
.
b
 = 
m¨kî_cﬁ‹
['b']

122 
£lf
.
waypoöt_m¨kîs
.
cﬁ‹
.
a
 = 
m¨kî_cﬁ‹
['a']

124 
£lf
.
waypoöt_m¨kîs
.
hódî
.
‰ame_id
 = 'odom'

125 
£lf
.
waypoöt_m¨kîs
.
hódî
.
°amp
 = 
ro•y
.
Time
.
	$now
()

126 
£lf
.
waypoöt_m¨kîs
.
poöts
 = 
	$li°
()

128 
def
 
	$öô_dockög_°©i⁄_m¨kî
(
£lf
):

129 #Deföê
a
 
m¨kî
 
the
 
ch¨gög
 
°©i⁄


130 
m¨kî_sˇÀ
 = 0.3

131 
m¨kî_li„time
 = 0 #0 
is
 
f‹evî


132 
m¨kî_ns
 = 'waypoints'

133 
m¨kî_id
 = 0

134 
m¨kî_cﬁ‹
 = {'r': 0.7, 'g': 0.7, 'b': 0.0, 'a': 1.0
	}
}

136 
£lf
.
dockög_°©i⁄_m¨kî_pub
 = 
ro•y
.
Publishî
('dockög_°©i⁄_m¨kî', 
M¨kî
, 
queue_size
=5)

138 
£lf
.
dockög_°©i⁄_m¨kî
 = 
	$M¨kî
()

139 
£lf
.
dockög_°©i⁄_m¨kî
.
ns
 = 
m¨kî_ns


140 
£lf
.
dockög_°©i⁄_m¨kî
.
id
 = 
m¨kî_id


141 
£lf
.
dockög_°©i⁄_m¨kî
.
ty≥
 = 
M¨kî
.
CYLINDER


142 
£lf
.
dockög_°©i⁄_m¨kî
.
a˘i⁄
 = 
M¨kî
.
ADD


143 
£lf
.
dockög_°©i⁄_m¨kî
.
li„time
 = 
ro•y
.
	$Duøti⁄
(
m¨kî_li„time
)

144 
£lf
.
dockög_°©i⁄_m¨kî
.
sˇÀ
.
x
 = 
m¨kî_sˇÀ


145 
£lf
.
dockög_°©i⁄_m¨kî
.
sˇÀ
.
y
 = 
m¨kî_sˇÀ


146 
£lf
.
dockög_°©i⁄_m¨kî
.
sˇÀ
.
z
 = 0.02

147 
£lf
.
dockög_°©i⁄_m¨kî
.
cﬁ‹
.
r
 = 
m¨kî_cﬁ‹
['r']

148 
£lf
.
dockög_°©i⁄_m¨kî
.
cﬁ‹
.
g
 = 
m¨kî_cﬁ‹
['g']

149 
£lf
.
dockög_°©i⁄_m¨kî
.
cﬁ‹
.
b
 = 
m¨kî_cﬁ‹
['b']

150 
£lf
.
dockög_°©i⁄_m¨kî
.
cﬁ‹
.
a
 = 
m¨kî_cﬁ‹
['a']

152 
£lf
.
dockög_°©i⁄_m¨kî
.
hódî
.
‰ame_id
 = 'odom'

153 
£lf
.
dockög_°©i⁄_m¨kî
.
hódî
.
°amp
 = 
ro•y
.
Time
.
	$now
()

154 
£lf
.
dockög_°©i⁄_m¨kî
.
po£
 = sñf.
dockög_°©i⁄_po£


	@
1
.
1
/usr/include
9
761
/home/xd/project/xd_robot/xd_robot_test/src/pi_trees_lib/examples/composite_tasks.py
/home/xd/project/xd_robot/xd_robot_test/src/pi_trees_lib/examples/parallel_example.py
/home/xd/project/xd_robot/xd_robot_test/src/pi_trees_lib/examples/patrol_tree.py
/home/xd/project/xd_robot/xd_robot_test/src/pi_trees_lib/examples/weighted_random_example.py
/home/xd/project/xd_robot/xd_robot_test/src/pi_trees_lib/examples/xd_btree_example.py
/home/xd/project/xd_robot/xd_robot_test/src/pi_trees_lib/setup.py
/home/xd/project/xd_robot/xd_robot_test/src/pi_trees_lib/src/pi_trees_lib/__init__.py
/home/xd/project/xd_robot/xd_robot_test/src/pi_trees_lib/src/pi_trees_lib/pi_trees_lib.py
/home/xd/project/xd_robot/xd_robot_test/src/pi_trees_lib/src/pi_trees_lib/task_setup.py
